/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface EmailDAO
 */
export interface EmailDAO {
    /**
     * 
     * @type {string}
     * @memberof EmailDAO
     */
    'email': string;
    /**
     * 
     * @type {number}
     * @memberof EmailDAO
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface EmailDTO
 */
export interface EmailDTO {
    /**
     * 
     * @type {string}
     * @memberof EmailDTO
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface JobHistoryDAO
 */
export interface JobHistoryDAO {
    /**
     * 
     * @type {number}
     * @memberof JobHistoryDAO
     */
    'jobId': number;
    /**
     * 
     * @type {string}
     * @memberof JobHistoryDAO
     */
    'lastRunTime': string;
    /**
     * 
     * @type {number}
     * @memberof JobHistoryDAO
     */
    'recordFetchCount': number;
    /**
     * 
     * @type {number}
     * @memberof JobHistoryDAO
     */
    'jobExitStatus': number;
    /**
     * 
     * @type {number}
     * @memberof JobHistoryDAO
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface JobsDAO
 */
export interface JobsDAO {
    /**
     * 
     * @type {string}
     * @memberof JobsDAO
     */
    'jobName': string;
    /**
     * 
     * @type {string}
     * @memberof JobsDAO
     */
    'storeLeadsUrl': string;
    /**
     * 
     * @type {string}
     * @memberof JobsDAO
     */
    'persona': string;
    /**
     * 
     * @type {number}
     * @memberof JobsDAO
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof JobsDAO
     */
    'creation_date': string;
    /**
     * 
     * @type {Array<JobHistoryDAO>}
     * @memberof JobsDAO
     */
    'runHistory': Array<JobHistoryDAO>;
}
/**
 * 
 * @export
 * @interface JobsDTO
 */
export interface JobsDTO {
    /**
     * 
     * @type {string}
     * @memberof JobsDTO
     */
    'jobName': string;
    /**
     * 
     * @type {string}
     * @memberof JobsDTO
     */
    'storeLeadsUrl': string;
    /**
     * 
     * @type {string}
     * @memberof JobsDTO
     */
    'persona': string;
}
/**
 * 
 * @export
 * @interface JobsMDAO
 */
export interface JobsMDAO {
    /**
     * 
     * @type {string}
     * @memberof JobsMDAO
     */
    'jobName': string;
    /**
     * 
     * @type {string}
     * @memberof JobsMDAO
     */
    'storeLeadsUrl': string;
    /**
     * 
     * @type {string}
     * @memberof JobsMDAO
     */
    'persona': string;
    /**
     * 
     * @type {number}
     * @memberof JobsMDAO
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof JobsMDAO
     */
    'creation_date': string;
}
/**
 * 
 * @export
 * @interface LocationInner
 */
export interface LocationInner {
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<LocationInner>}
     * @memberof ValidationError
     */
    'loc': Array<LocationInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}

/**
 * ApolloUtlApi - axios parameter creator
 * @export
 */
export const ApolloUtlApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetches data from Apollo based on domains,personas and page sizes
         * @summary Get Data From Apollo
         * @param {Array<string>} [domains] 
         * @param {Array<string>} [personas] 
         * @param {number} [pageSize] 
         * @param {number} [pageNo] 
         * @param {boolean} [shouldFetchNextPages] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataFromApolloApolloUtlGetDataFromApolloGet: async (domains?: Array<string>, personas?: Array<string>, pageSize?: number, pageNo?: number, shouldFetchNextPages?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apolloUtl/getDataFromApollo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (domains) {
                localVarQueryParameter['domains'] = domains;
            }

            if (personas) {
                localVarQueryParameter['personas'] = personas;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['pageNo'] = pageNo;
            }

            if (shouldFetchNextPages !== undefined) {
                localVarQueryParameter['shouldFetchNextPages'] = shouldFetchNextPages;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApolloUtlApi - functional programming interface
 * @export
 */
export const ApolloUtlApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApolloUtlApiAxiosParamCreator(configuration)
    return {
        /**
         * Fetches data from Apollo based on domains,personas and page sizes
         * @summary Get Data From Apollo
         * @param {Array<string>} [domains] 
         * @param {Array<string>} [personas] 
         * @param {number} [pageSize] 
         * @param {number} [pageNo] 
         * @param {boolean} [shouldFetchNextPages] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataFromApolloApolloUtlGetDataFromApolloGet(domains?: Array<string>, personas?: Array<string>, pageSize?: number, pageNo?: number, shouldFetchNextPages?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataFromApolloApolloUtlGetDataFromApolloGet(domains, personas, pageSize, pageNo, shouldFetchNextPages, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ApolloUtlApi - factory interface
 * @export
 */
export const ApolloUtlApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApolloUtlApiFp(configuration)
    return {
        /**
         * Fetches data from Apollo based on domains,personas and page sizes
         * @summary Get Data From Apollo
         * @param {Array<string>} [domains] 
         * @param {Array<string>} [personas] 
         * @param {number} [pageSize] 
         * @param {number} [pageNo] 
         * @param {boolean} [shouldFetchNextPages] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataFromApolloApolloUtlGetDataFromApolloGet(domains?: Array<string>, personas?: Array<string>, pageSize?: number, pageNo?: number, shouldFetchNextPages?: boolean, options?: any): AxiosPromise<any> {
            return localVarFp.getDataFromApolloApolloUtlGetDataFromApolloGet(domains, personas, pageSize, pageNo, shouldFetchNextPages, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApolloUtlApi - interface
 * @export
 * @interface ApolloUtlApi
 */
export interface ApolloUtlApiInterface {
    /**
     * Fetches data from Apollo based on domains,personas and page sizes
     * @summary Get Data From Apollo
     * @param {Array<string>} [domains] 
     * @param {Array<string>} [personas] 
     * @param {number} [pageSize] 
     * @param {number} [pageNo] 
     * @param {boolean} [shouldFetchNextPages] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApolloUtlApiInterface
     */
    getDataFromApolloApolloUtlGetDataFromApolloGet(domains?: Array<string>, personas?: Array<string>, pageSize?: number, pageNo?: number, shouldFetchNextPages?: boolean, options?: AxiosRequestConfig): AxiosPromise<any>;

}

/**
 * ApolloUtlApi - object-oriented interface
 * @export
 * @class ApolloUtlApi
 * @extends {BaseAPI}
 */
export class ApolloUtlApi extends BaseAPI implements ApolloUtlApiInterface {
    /**
     * Fetches data from Apollo based on domains,personas and page sizes
     * @summary Get Data From Apollo
     * @param {Array<string>} [domains] 
     * @param {Array<string>} [personas] 
     * @param {number} [pageSize] 
     * @param {number} [pageNo] 
     * @param {boolean} [shouldFetchNextPages] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApolloUtlApi
     */
    public getDataFromApolloApolloUtlGetDataFromApolloGet(domains?: Array<string>, personas?: Array<string>, pageSize?: number, pageNo?: number, shouldFetchNextPages?: boolean, options?: AxiosRequestConfig) {
        return ApolloUtlApiFp(this.configuration).getDataFromApolloApolloUtlGetDataFromApolloGet(domains, personas, pageSize, pageNo, shouldFetchNextPages, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rootGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(options?: any): AxiosPromise<any> {
            return localVarFp.rootGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * 
     * @summary Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    rootGet(options?: AxiosRequestConfig): AxiosPromise<any>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * 
     * @summary Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rootGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rootGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EmailApi - axios parameter creator
 * @export
 */
export const EmailApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a email
         * @summary Add Email
         * @param {EmailDTO} emailDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEmailEmailPost: async (emailDTO: EmailDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailDTO' is not null or undefined
            assertParamExists('addEmailEmailPost', 'emailDTO', emailDTO)
            const localVarPath = `/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all the emails
         * @summary Get All Emails
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEmailsEmailAllGet: async (skip?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/email/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a email
         * @summary Remove Email By Id
         * @param {number} emailId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeEmailByIdEmailIdDelete: async (emailId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailId' is not null or undefined
            assertParamExists('removeEmailByIdEmailIdDelete', 'emailId', emailId)
            const localVarPath = `/email/id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (emailId !== undefined) {
                localVarQueryParameter['email_id'] = emailId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a email
         * @summary Remove Email
         * @param {EmailDTO} emailDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeEmailEmailDelete: async (emailDTO: EmailDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailDTO' is not null or undefined
            assertParamExists('removeEmailEmailDelete', 'emailDTO', emailDTO)
            const localVarPath = `/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmailApi - functional programming interface
 * @export
 */
export const EmailApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmailApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a email
         * @summary Add Email
         * @param {EmailDTO} emailDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addEmailEmailPost(emailDTO: EmailDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailDAO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addEmailEmailPost(emailDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all the emails
         * @summary Get All Emails
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEmailsEmailAllGet(skip?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmailDAO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEmailsEmailAllGet(skip, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a email
         * @summary Remove Email By Id
         * @param {number} emailId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeEmailByIdEmailIdDelete(emailId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeEmailByIdEmailIdDelete(emailId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a email
         * @summary Remove Email
         * @param {EmailDTO} emailDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeEmailEmailDelete(emailDTO: EmailDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeEmailEmailDelete(emailDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmailApi - factory interface
 * @export
 */
export const EmailApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmailApiFp(configuration)
    return {
        /**
         * Add a email
         * @summary Add Email
         * @param {EmailDTO} emailDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEmailEmailPost(emailDTO: EmailDTO, options?: any): AxiosPromise<EmailDAO> {
            return localVarFp.addEmailEmailPost(emailDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all the emails
         * @summary Get All Emails
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEmailsEmailAllGet(skip?: number, limit?: number, options?: any): AxiosPromise<Array<EmailDAO>> {
            return localVarFp.getAllEmailsEmailAllGet(skip, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a email
         * @summary Remove Email By Id
         * @param {number} emailId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeEmailByIdEmailIdDelete(emailId: number, options?: any): AxiosPromise<number> {
            return localVarFp.removeEmailByIdEmailIdDelete(emailId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a email
         * @summary Remove Email
         * @param {EmailDTO} emailDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeEmailEmailDelete(emailDTO: EmailDTO, options?: any): AxiosPromise<number> {
            return localVarFp.removeEmailEmailDelete(emailDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmailApi - interface
 * @export
 * @interface EmailApi
 */
export interface EmailApiInterface {
    /**
     * Add a email
     * @summary Add Email
     * @param {EmailDTO} emailDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApiInterface
     */
    addEmailEmailPost(emailDTO: EmailDTO, options?: AxiosRequestConfig): AxiosPromise<EmailDAO>;

    /**
     * Get all the emails
     * @summary Get All Emails
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApiInterface
     */
    getAllEmailsEmailAllGet(skip?: number, limit?: number, options?: AxiosRequestConfig): AxiosPromise<Array<EmailDAO>>;

    /**
     * Remove a email
     * @summary Remove Email By Id
     * @param {number} emailId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApiInterface
     */
    removeEmailByIdEmailIdDelete(emailId: number, options?: AxiosRequestConfig): AxiosPromise<number>;

    /**
     * Remove a email
     * @summary Remove Email
     * @param {EmailDTO} emailDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApiInterface
     */
    removeEmailEmailDelete(emailDTO: EmailDTO, options?: AxiosRequestConfig): AxiosPromise<number>;

}

/**
 * EmailApi - object-oriented interface
 * @export
 * @class EmailApi
 * @extends {BaseAPI}
 */
export class EmailApi extends BaseAPI implements EmailApiInterface {
    /**
     * Add a email
     * @summary Add Email
     * @param {EmailDTO} emailDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApi
     */
    public addEmailEmailPost(emailDTO: EmailDTO, options?: AxiosRequestConfig) {
        return EmailApiFp(this.configuration).addEmailEmailPost(emailDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all the emails
     * @summary Get All Emails
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApi
     */
    public getAllEmailsEmailAllGet(skip?: number, limit?: number, options?: AxiosRequestConfig) {
        return EmailApiFp(this.configuration).getAllEmailsEmailAllGet(skip, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a email
     * @summary Remove Email By Id
     * @param {number} emailId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApi
     */
    public removeEmailByIdEmailIdDelete(emailId: number, options?: AxiosRequestConfig) {
        return EmailApiFp(this.configuration).removeEmailByIdEmailIdDelete(emailId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a email
     * @summary Remove Email
     * @param {EmailDTO} emailDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApi
     */
    public removeEmailEmailDelete(emailDTO: EmailDTO, options?: AxiosRequestConfig) {
        return EmailApiFp(this.configuration).removeEmailEmailDelete(emailDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * JobsApi - axios parameter creator
 * @export
 */
export const JobsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Job
         * @param {JobsDTO} jobsDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createJobJobsJobPost: async (jobsDTO: JobsDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobsDTO' is not null or undefined
            assertParamExists('createJobJobsJobPost', 'jobsDTO', jobsDTO)
            const localVarPath = `/jobs/job`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobsDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Jobs
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllJobsJobsAllGet: async (skip?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/jobs/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Job By Id
         * @param {number} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobByIdJobsIdGet: async (jobId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('getJobByIdJobsIdGet', 'jobId', jobId)
            const localVarPath = `/jobs/id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (jobId !== undefined) {
                localVarQueryParameter['jobId'] = jobId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Job By Name
         * @param {string} jobName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobByNameJobsGet: async (jobName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobName' is not null or undefined
            assertParamExists('getJobByNameJobsGet', 'jobName', jobName)
            const localVarPath = `/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (jobName !== undefined) {
                localVarQueryParameter['jobName'] = jobName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Job
         * @param {number} jobId 
         * @param {JobsDTO} jobsDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateJobJobsPut: async (jobId: number, jobsDTO: JobsDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('updateJobJobsPut', 'jobId', jobId)
            // verify required parameter 'jobsDTO' is not null or undefined
            assertParamExists('updateJobJobsPut', 'jobsDTO', jobsDTO)
            const localVarPath = `/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (jobId !== undefined) {
                localVarQueryParameter['job_id'] = jobId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobsDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobsApi - functional programming interface
 * @export
 */
export const JobsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Job
         * @param {JobsDTO} jobsDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createJobJobsJobPost(jobsDTO: JobsDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobsDAO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createJobJobsJobPost(jobsDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get All Jobs
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllJobsJobsAllGet(skip?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JobsMDAO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllJobsJobsAllGet(skip, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Job By Id
         * @param {number} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJobByIdJobsIdGet(jobId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobsDAO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJobByIdJobsIdGet(jobId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Job By Name
         * @param {string} jobName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJobByNameJobsGet(jobName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobsDAO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJobByNameJobsGet(jobName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Job
         * @param {number} jobId 
         * @param {JobsDTO} jobsDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateJobJobsPut(jobId: number, jobsDTO: JobsDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobsDAO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateJobJobsPut(jobId, jobsDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JobsApi - factory interface
 * @export
 */
export const JobsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Job
         * @param {JobsDTO} jobsDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createJobJobsJobPost(jobsDTO: JobsDTO, options?: any): AxiosPromise<JobsDAO> {
            return localVarFp.createJobJobsJobPost(jobsDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Jobs
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllJobsJobsAllGet(skip?: number, limit?: number, options?: any): AxiosPromise<Array<JobsMDAO>> {
            return localVarFp.getAllJobsJobsAllGet(skip, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Job By Id
         * @param {number} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobByIdJobsIdGet(jobId: number, options?: any): AxiosPromise<JobsDAO> {
            return localVarFp.getJobByIdJobsIdGet(jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Job By Name
         * @param {string} jobName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobByNameJobsGet(jobName: string, options?: any): AxiosPromise<JobsDAO> {
            return localVarFp.getJobByNameJobsGet(jobName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Job
         * @param {number} jobId 
         * @param {JobsDTO} jobsDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateJobJobsPut(jobId: number, jobsDTO: JobsDTO, options?: any): AxiosPromise<JobsDAO> {
            return localVarFp.updateJobJobsPut(jobId, jobsDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobsApi - interface
 * @export
 * @interface JobsApi
 */
export interface JobsApiInterface {
    /**
     * 
     * @summary Create Job
     * @param {JobsDTO} jobsDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    createJobJobsJobPost(jobsDTO: JobsDTO, options?: AxiosRequestConfig): AxiosPromise<JobsDAO>;

    /**
     * 
     * @summary Get All Jobs
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    getAllJobsJobsAllGet(skip?: number, limit?: number, options?: AxiosRequestConfig): AxiosPromise<Array<JobsMDAO>>;

    /**
     * 
     * @summary Get Job By Id
     * @param {number} jobId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    getJobByIdJobsIdGet(jobId: number, options?: AxiosRequestConfig): AxiosPromise<JobsDAO>;

    /**
     * 
     * @summary Get Job By Name
     * @param {string} jobName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    getJobByNameJobsGet(jobName: string, options?: AxiosRequestConfig): AxiosPromise<JobsDAO>;

    /**
     * 
     * @summary Update Job
     * @param {number} jobId 
     * @param {JobsDTO} jobsDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    updateJobJobsPut(jobId: number, jobsDTO: JobsDTO, options?: AxiosRequestConfig): AxiosPromise<JobsDAO>;

}

/**
 * JobsApi - object-oriented interface
 * @export
 * @class JobsApi
 * @extends {BaseAPI}
 */
export class JobsApi extends BaseAPI implements JobsApiInterface {
    /**
     * 
     * @summary Create Job
     * @param {JobsDTO} jobsDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public createJobJobsJobPost(jobsDTO: JobsDTO, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).createJobJobsJobPost(jobsDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Jobs
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public getAllJobsJobsAllGet(skip?: number, limit?: number, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).getAllJobsJobsAllGet(skip, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Job By Id
     * @param {number} jobId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public getJobByIdJobsIdGet(jobId: number, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).getJobByIdJobsIdGet(jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Job By Name
     * @param {string} jobName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public getJobByNameJobsGet(jobName: string, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).getJobByNameJobsGet(jobName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Job
     * @param {number} jobId 
     * @param {JobsDTO} jobsDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public updateJobJobsPut(jobId: number, jobsDTO: JobsDTO, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).updateJobJobsPut(jobId, jobsDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StoreleadsUtlApi - axios parameter creator
 * @export
 */
export const StoreleadsUtlApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Data From Storeleads
         * @param {string} storeleadsURL 
         * @param {number} pageSize 
         * @param {string} [cursor] 
         * @param {boolean} [fetchAll] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataFromStoreleadsStoreleadsUtlGetDataFromStoreLeadsGet: async (storeleadsURL: string, pageSize: number, cursor?: string, fetchAll?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeleadsURL' is not null or undefined
            assertParamExists('getDataFromStoreleadsStoreleadsUtlGetDataFromStoreLeadsGet', 'storeleadsURL', storeleadsURL)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('getDataFromStoreleadsStoreleadsUtlGetDataFromStoreLeadsGet', 'pageSize', pageSize)
            const localVarPath = `/storeleadsUtl/getDataFromStoreLeads`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (storeleadsURL !== undefined) {
                localVarQueryParameter['storeleadsURL'] = storeleadsURL;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (fetchAll !== undefined) {
                localVarQueryParameter['fetchAll'] = fetchAll;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches only 10 items of a storeleadsURL
         * @summary Verify Store Leads Url
         * @param {string} storeleadsURL 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyStoreLeadsUrlStoreleadsUtlVerifyStoreLeadsUrlGet: async (storeleadsURL: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeleadsURL' is not null or undefined
            assertParamExists('verifyStoreLeadsUrlStoreleadsUtlVerifyStoreLeadsUrlGet', 'storeleadsURL', storeleadsURL)
            const localVarPath = `/storeleadsUtl/verifyStoreLeadsUrl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (storeleadsURL !== undefined) {
                localVarQueryParameter['storeleadsURL'] = storeleadsURL;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StoreleadsUtlApi - functional programming interface
 * @export
 */
export const StoreleadsUtlApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StoreleadsUtlApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Data From Storeleads
         * @param {string} storeleadsURL 
         * @param {number} pageSize 
         * @param {string} [cursor] 
         * @param {boolean} [fetchAll] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataFromStoreleadsStoreleadsUtlGetDataFromStoreLeadsGet(storeleadsURL: string, pageSize: number, cursor?: string, fetchAll?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataFromStoreleadsStoreleadsUtlGetDataFromStoreLeadsGet(storeleadsURL, pageSize, cursor, fetchAll, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches only 10 items of a storeleadsURL
         * @summary Verify Store Leads Url
         * @param {string} storeleadsURL 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyStoreLeadsUrlStoreleadsUtlVerifyStoreLeadsUrlGet(storeleadsURL: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyStoreLeadsUrlStoreleadsUtlVerifyStoreLeadsUrlGet(storeleadsURL, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StoreleadsUtlApi - factory interface
 * @export
 */
export const StoreleadsUtlApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StoreleadsUtlApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Data From Storeleads
         * @param {string} storeleadsURL 
         * @param {number} pageSize 
         * @param {string} [cursor] 
         * @param {boolean} [fetchAll] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataFromStoreleadsStoreleadsUtlGetDataFromStoreLeadsGet(storeleadsURL: string, pageSize: number, cursor?: string, fetchAll?: boolean, options?: any): AxiosPromise<any> {
            return localVarFp.getDataFromStoreleadsStoreleadsUtlGetDataFromStoreLeadsGet(storeleadsURL, pageSize, cursor, fetchAll, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches only 10 items of a storeleadsURL
         * @summary Verify Store Leads Url
         * @param {string} storeleadsURL 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyStoreLeadsUrlStoreleadsUtlVerifyStoreLeadsUrlGet(storeleadsURL: string, options?: any): AxiosPromise<any> {
            return localVarFp.verifyStoreLeadsUrlStoreleadsUtlVerifyStoreLeadsUrlGet(storeleadsURL, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StoreleadsUtlApi - interface
 * @export
 * @interface StoreleadsUtlApi
 */
export interface StoreleadsUtlApiInterface {
    /**
     * 
     * @summary Get Data From Storeleads
     * @param {string} storeleadsURL 
     * @param {number} pageSize 
     * @param {string} [cursor] 
     * @param {boolean} [fetchAll] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreleadsUtlApiInterface
     */
    getDataFromStoreleadsStoreleadsUtlGetDataFromStoreLeadsGet(storeleadsURL: string, pageSize: number, cursor?: string, fetchAll?: boolean, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * Fetches only 10 items of a storeleadsURL
     * @summary Verify Store Leads Url
     * @param {string} storeleadsURL 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreleadsUtlApiInterface
     */
    verifyStoreLeadsUrlStoreleadsUtlVerifyStoreLeadsUrlGet(storeleadsURL: string, options?: AxiosRequestConfig): AxiosPromise<any>;

}

/**
 * StoreleadsUtlApi - object-oriented interface
 * @export
 * @class StoreleadsUtlApi
 * @extends {BaseAPI}
 */
export class StoreleadsUtlApi extends BaseAPI implements StoreleadsUtlApiInterface {
    /**
     * 
     * @summary Get Data From Storeleads
     * @param {string} storeleadsURL 
     * @param {number} pageSize 
     * @param {string} [cursor] 
     * @param {boolean} [fetchAll] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreleadsUtlApi
     */
    public getDataFromStoreleadsStoreleadsUtlGetDataFromStoreLeadsGet(storeleadsURL: string, pageSize: number, cursor?: string, fetchAll?: boolean, options?: AxiosRequestConfig) {
        return StoreleadsUtlApiFp(this.configuration).getDataFromStoreleadsStoreleadsUtlGetDataFromStoreLeadsGet(storeleadsURL, pageSize, cursor, fetchAll, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches only 10 items of a storeleadsURL
     * @summary Verify Store Leads Url
     * @param {string} storeleadsURL 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreleadsUtlApi
     */
    public verifyStoreLeadsUrlStoreleadsUtlVerifyStoreLeadsUrlGet(storeleadsURL: string, options?: AxiosRequestConfig) {
        return StoreleadsUtlApiFp(this.configuration).verifyStoreLeadsUrlStoreleadsUtlVerifyStoreLeadsUrlGet(storeleadsURL, options).then((request) => request(this.axios, this.basePath));
    }
}


