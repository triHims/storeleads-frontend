/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface EmailDAO
 */
export interface EmailDAO {
    /**
     * 
     * @type {string}
     * @memberof EmailDAO
     */
    'email': string;
    /**
     * 
     * @type {number}
     * @memberof EmailDAO
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface EmailDTO
 */
export interface EmailDTO {
    /**
     * 
     * @type {string}
     * @memberof EmailDTO
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface JobHistoryDAO
 */
export interface JobHistoryDAO {
    /**
     * 
     * @type {number}
     * @memberof JobHistoryDAO
     */
    'jobId': number;
    /**
     * 
     * @type {string}
     * @memberof JobHistoryDAO
     */
    'lastRunTime': string;
    /**
     * 
     * @type {number}
     * @memberof JobHistoryDAO
     */
    'recordFetchCount': number;
    /**
     * 
     * @type {number}
     * @memberof JobHistoryDAO
     */
    'jobExitStatus': number;
    /**
     * 
     * @type {number}
     * @memberof JobHistoryDAO
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface JobsDAO
 */
export interface JobsDAO {
    /**
     * 
     * @type {string}
     * @memberof JobsDAO
     */
    'jobName': string;
    /**
     * 
     * @type {string}
     * @memberof JobsDAO
     */
    'storeLeadsUrl': string;
    /**
     * 
     * @type {string}
     * @memberof JobsDAO
     */
    'persona': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof JobsDAO
     */
    'email_id_list': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof JobsDAO
     */
    'minimum_traffic_count'?: number;
    /**
     * 
     * @type {number}
     * @memberof JobsDAO
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof JobsDAO
     */
    'creation_date': string;
    /**
     * 
     * @type {number}
     * @memberof JobsDAO
     */
    'created_by'?: number;
    /**
     * 
     * @type {string}
     * @memberof JobsDAO
     */
    'created_date'?: string;
    /**
     * 
     * @type {number}
     * @memberof JobsDAO
     */
    'updated_by'?: number;
    /**
     * 
     * @type {string}
     * @memberof JobsDAO
     */
    'updated_date'?: string;
    /**
     * 
     * @type {Array<JobHistoryDAO>}
     * @memberof JobsDAO
     */
    'runHistory': Array<JobHistoryDAO>;
}
/**
 * 
 * @export
 * @interface JobsDTO
 */
export interface JobsDTO {
    /**
     * 
     * @type {string}
     * @memberof JobsDTO
     */
    'jobName': string;
    /**
     * 
     * @type {string}
     * @memberof JobsDTO
     */
    'storeLeadsUrl': string;
    /**
     * 
     * @type {string}
     * @memberof JobsDTO
     */
    'persona': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof JobsDTO
     */
    'email_id_list': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof JobsDTO
     */
    'minimum_traffic_count'?: number;
}
/**
 * 
 * @export
 * @interface JobsMDAO
 */
export interface JobsMDAO {
    /**
     * 
     * @type {string}
     * @memberof JobsMDAO
     */
    'jobName': string;
    /**
     * 
     * @type {string}
     * @memberof JobsMDAO
     */
    'storeLeadsUrl': string;
    /**
     * 
     * @type {string}
     * @memberof JobsMDAO
     */
    'persona': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof JobsMDAO
     */
    'email_id_list': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof JobsMDAO
     */
    'minimum_traffic_count'?: number;
    /**
     * 
     * @type {number}
     * @memberof JobsMDAO
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof JobsMDAO
     */
    'creation_date': string;
}
/**
 * 
 * @export
 * @interface LocationInner
 */
export interface LocationInner {
}
/**
 * 
 * @export
 * @interface UserDAO
 */
export interface UserDAO {
    /**
     * 
     * @type {string}
     * @memberof UserDAO
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserDAO
     */
    'firstname'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDAO
     */
    'lastname'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserDAO
     */
    'isActive'?: boolean;
}
/**
 * 
 * @export
 * @interface UserSignUp
 */
export interface UserSignUp {
    /**
     * 
     * @type {string}
     * @memberof UserSignUp
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserSignUp
     */
    'firstname'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserSignUp
     */
    'lastname'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserSignUp
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<LocationInner>}
     * @memberof ValidationError
     */
    'loc': Array<LocationInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface WebhookJob
 */
export interface WebhookJob {
    /**
     * 
     * @type {string}
     * @memberof WebhookJob
     */
    'jobName': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof WebhookJob
     */
    'email_id_list': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof WebhookJob
     */
    'persona': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof WebhookJob
     */
    'minimum_traffic_count'?: number;
}
/**
 * 
 * @export
 * @interface WebhookJobOptional
 */
export interface WebhookJobOptional {
    /**
     * 
     * @type {string}
     * @memberof WebhookJobOptional
     */
    'jobName'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof WebhookJobOptional
     */
    'email_id_list'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof WebhookJobOptional
     */
    'persona'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof WebhookJobOptional
     */
    'minimum_traffic_count'?: number;
}
/**
 * 
 * @export
 * @interface WebhookJobReturn
 */
export interface WebhookJobReturn {
    /**
     * 
     * @type {string}
     * @memberof WebhookJobReturn
     */
    'jobName': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof WebhookJobReturn
     */
    'email_id_list': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof WebhookJobReturn
     */
    'persona': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof WebhookJobReturn
     */
    'minimum_traffic_count'?: number;
    /**
     * 
     * @type {string}
     * @memberof WebhookJobReturn
     */
    '_id'?: string;
}
/**
 * 
 * @export
 * @interface WebhookPayloadModel
 */
export interface WebhookPayloadModel {
    /**
     * 
     * @type {string}
     * @memberof WebhookPayloadModel
     */
    'pushDate': string;
    /**
     * 
     * @type {object}
     * @memberof WebhookPayloadModel
     */
    'data': object;
}

/**
 * ApolloUtlApi - axios parameter creator
 * @export
 */
export const ApolloUtlApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetches data from Apollo based on domains,personas and page sizes
         * @summary Get Data From Apollo
         * @param {Array<string>} [domains] 
         * @param {Array<string>} [personas] 
         * @param {number} [pageSize] 
         * @param {number} [pageNo] 
         * @param {boolean} [shouldFetchNextPages] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataFromApolloApolloUtlGetDataFromApolloGet: async (domains?: Array<string>, personas?: Array<string>, pageSize?: number, pageNo?: number, shouldFetchNextPages?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apolloUtl/getDataFromApollo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", ["user"], configuration)

            if (domains) {
                localVarQueryParameter['domains'] = domains;
            }

            if (personas) {
                localVarQueryParameter['personas'] = personas;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['pageNo'] = pageNo;
            }

            if (shouldFetchNextPages !== undefined) {
                localVarQueryParameter['shouldFetchNextPages'] = shouldFetchNextPages;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApolloUtlApi - functional programming interface
 * @export
 */
export const ApolloUtlApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApolloUtlApiAxiosParamCreator(configuration)
    return {
        /**
         * Fetches data from Apollo based on domains,personas and page sizes
         * @summary Get Data From Apollo
         * @param {Array<string>} [domains] 
         * @param {Array<string>} [personas] 
         * @param {number} [pageSize] 
         * @param {number} [pageNo] 
         * @param {boolean} [shouldFetchNextPages] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataFromApolloApolloUtlGetDataFromApolloGet(domains?: Array<string>, personas?: Array<string>, pageSize?: number, pageNo?: number, shouldFetchNextPages?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataFromApolloApolloUtlGetDataFromApolloGet(domains, personas, pageSize, pageNo, shouldFetchNextPages, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ApolloUtlApi - factory interface
 * @export
 */
export const ApolloUtlApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApolloUtlApiFp(configuration)
    return {
        /**
         * Fetches data from Apollo based on domains,personas and page sizes
         * @summary Get Data From Apollo
         * @param {Array<string>} [domains] 
         * @param {Array<string>} [personas] 
         * @param {number} [pageSize] 
         * @param {number} [pageNo] 
         * @param {boolean} [shouldFetchNextPages] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataFromApolloApolloUtlGetDataFromApolloGet(domains?: Array<string>, personas?: Array<string>, pageSize?: number, pageNo?: number, shouldFetchNextPages?: boolean, options?: any): AxiosPromise<any> {
            return localVarFp.getDataFromApolloApolloUtlGetDataFromApolloGet(domains, personas, pageSize, pageNo, shouldFetchNextPages, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApolloUtlApi - interface
 * @export
 * @interface ApolloUtlApi
 */
export interface ApolloUtlApiInterface {
    /**
     * Fetches data from Apollo based on domains,personas and page sizes
     * @summary Get Data From Apollo
     * @param {Array<string>} [domains] 
     * @param {Array<string>} [personas] 
     * @param {number} [pageSize] 
     * @param {number} [pageNo] 
     * @param {boolean} [shouldFetchNextPages] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApolloUtlApiInterface
     */
    getDataFromApolloApolloUtlGetDataFromApolloGet(domains?: Array<string>, personas?: Array<string>, pageSize?: number, pageNo?: number, shouldFetchNextPages?: boolean, options?: AxiosRequestConfig): AxiosPromise<any>;

}

/**
 * ApolloUtlApi - object-oriented interface
 * @export
 * @class ApolloUtlApi
 * @extends {BaseAPI}
 */
export class ApolloUtlApi extends BaseAPI implements ApolloUtlApiInterface {
    /**
     * Fetches data from Apollo based on domains,personas and page sizes
     * @summary Get Data From Apollo
     * @param {Array<string>} [domains] 
     * @param {Array<string>} [personas] 
     * @param {number} [pageSize] 
     * @param {number} [pageNo] 
     * @param {boolean} [shouldFetchNextPages] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApolloUtlApi
     */
    public getDataFromApolloApolloUtlGetDataFromApolloGet(domains?: Array<string>, personas?: Array<string>, pageSize?: number, pageNo?: number, shouldFetchNextPages?: boolean, options?: AxiosRequestConfig) {
        return ApolloUtlApiFp(this.configuration).getDataFromApolloApolloUtlGetDataFromApolloGet(domains, personas, pageSize, pageNo, shouldFetchNextPages, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Login User
         * @param {string} username 
         * @param {string} password 
         * @param {string} [grantType] 
         * @param {string} [scope] 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUserAuthLoginPost: async (username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('loginUserAuthLoginPost', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('loginUserAuthLoginPost', 'password', password)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.set('username', username as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.set('password', password as any);
            }
    
            if (scope !== undefined) { 
                localVarFormParams.set('scope', scope as any);
            }
    
            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Promotetoken
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promoteTokenAuthPromoteTokenPost: async (requestBody: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('promoteTokenAuthPromoteTokenPost', 'requestBody', requestBody)
            const localVarPath = `/auth/promote-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", ["user"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Users Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUsersMeAuthUsersMeGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", ["user"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Signup User
         * @param {UserSignUp} userSignUp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signupUserAuthSignupPost: async (userSignUp: UserSignUp, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userSignUp' is not null or undefined
            assertParamExists('signupUserAuthSignupPost', 'userSignUp', userSignUp)
            const localVarPath = `/auth/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userSignUp, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Login User
         * @param {string} username 
         * @param {string} password 
         * @param {string} [grantType] 
         * @param {string} [scope] 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginUserAuthLoginPost(username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginUserAuthLoginPost(username, password, grantType, scope, clientId, clientSecret, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Promotetoken
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promoteTokenAuthPromoteTokenPost(requestBody: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promoteTokenAuthPromoteTokenPost(requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Read Users Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readUsersMeAuthUsersMeGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDAO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readUsersMeAuthUsersMeGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Signup User
         * @param {UserSignUp} userSignUp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signupUserAuthSignupPost(userSignUp: UserSignUp, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDAO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signupUserAuthSignupPost(userSignUp, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Login User
         * @param {string} username 
         * @param {string} password 
         * @param {string} [grantType] 
         * @param {string} [scope] 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUserAuthLoginPost(username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options?: any): AxiosPromise<any> {
            return localVarFp.loginUserAuthLoginPost(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Promotetoken
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promoteTokenAuthPromoteTokenPost(requestBody: Array<string>, options?: any): AxiosPromise<any> {
            return localVarFp.promoteTokenAuthPromoteTokenPost(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Users Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUsersMeAuthUsersMeGet(options?: any): AxiosPromise<UserDAO> {
            return localVarFp.readUsersMeAuthUsersMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Signup User
         * @param {UserSignUp} userSignUp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signupUserAuthSignupPost(userSignUp: UserSignUp, options?: any): AxiosPromise<UserDAO> {
            return localVarFp.signupUserAuthSignupPost(userSignUp, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - interface
 * @export
 * @interface AuthApi
 */
export interface AuthApiInterface {
    /**
     * 
     * @summary Login User
     * @param {string} username 
     * @param {string} password 
     * @param {string} [grantType] 
     * @param {string} [scope] 
     * @param {string} [clientId] 
     * @param {string} [clientSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    loginUserAuthLoginPost(username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Promotetoken
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    promoteTokenAuthPromoteTokenPost(requestBody: Array<string>, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Read Users Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    readUsersMeAuthUsersMeGet(options?: AxiosRequestConfig): AxiosPromise<UserDAO>;

    /**
     * 
     * @summary Signup User
     * @param {UserSignUp} userSignUp 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    signupUserAuthSignupPost(userSignUp: UserSignUp, options?: AxiosRequestConfig): AxiosPromise<UserDAO>;

}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI implements AuthApiInterface {
    /**
     * 
     * @summary Login User
     * @param {string} username 
     * @param {string} password 
     * @param {string} [grantType] 
     * @param {string} [scope] 
     * @param {string} [clientId] 
     * @param {string} [clientSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public loginUserAuthLoginPost(username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).loginUserAuthLoginPost(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Promotetoken
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public promoteTokenAuthPromoteTokenPost(requestBody: Array<string>, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).promoteTokenAuthPromoteTokenPost(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Users Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public readUsersMeAuthUsersMeGet(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).readUsersMeAuthUsersMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Signup User
     * @param {UserSignUp} userSignUp 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public signupUserAuthSignupPost(userSignUp: UserSignUp, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).signupUserAuthSignupPost(userSignUp, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rootGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(options?: any): AxiosPromise<any> {
            return localVarFp.rootGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * 
     * @summary Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    rootGet(options?: AxiosRequestConfig): AxiosPromise<any>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * 
     * @summary Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rootGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rootGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EmailApi - axios parameter creator
 * @export
 */
export const EmailApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a email
         * @summary Add Email
         * @param {EmailDTO} emailDTO 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        addEmailEmailPost: async (emailDTO: EmailDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailDTO' is not null or undefined
            assertParamExists('addEmailEmailPost', 'emailDTO', emailDTO)
            const localVarPath = `/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", ["user"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all the emails
         * @summary Get All Emails
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getAllEmailsEmailAllGet: async (skip?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/email/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", ["user"], configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a email
         * @summary Remove Email By Id
         * @param {number} emailId 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        removeEmailByIdEmailIdDelete: async (emailId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailId' is not null or undefined
            assertParamExists('removeEmailByIdEmailIdDelete', 'emailId', emailId)
            const localVarPath = `/email/id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", ["user"], configuration)

            if (emailId !== undefined) {
                localVarQueryParameter['email_id'] = emailId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a email
         * @summary Remove Email
         * @param {EmailDTO} emailDTO 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        removeEmailEmailDelete: async (emailDTO: EmailDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailDTO' is not null or undefined
            assertParamExists('removeEmailEmailDelete', 'emailDTO', emailDTO)
            const localVarPath = `/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", ["user"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmailApi - functional programming interface
 * @export
 */
export const EmailApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmailApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a email
         * @summary Add Email
         * @param {EmailDTO} emailDTO 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async addEmailEmailPost(emailDTO: EmailDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailDAO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addEmailEmailPost(emailDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all the emails
         * @summary Get All Emails
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getAllEmailsEmailAllGet(skip?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmailDAO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEmailsEmailAllGet(skip, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a email
         * @summary Remove Email By Id
         * @param {number} emailId 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async removeEmailByIdEmailIdDelete(emailId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeEmailByIdEmailIdDelete(emailId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a email
         * @summary Remove Email
         * @param {EmailDTO} emailDTO 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async removeEmailEmailDelete(emailDTO: EmailDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeEmailEmailDelete(emailDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmailApi - factory interface
 * @export
 */
export const EmailApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmailApiFp(configuration)
    return {
        /**
         * Add a email
         * @summary Add Email
         * @param {EmailDTO} emailDTO 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        addEmailEmailPost(emailDTO: EmailDTO, options?: any): AxiosPromise<EmailDAO> {
            return localVarFp.addEmailEmailPost(emailDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all the emails
         * @summary Get All Emails
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getAllEmailsEmailAllGet(skip?: number, limit?: number, options?: any): AxiosPromise<Array<EmailDAO>> {
            return localVarFp.getAllEmailsEmailAllGet(skip, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a email
         * @summary Remove Email By Id
         * @param {number} emailId 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        removeEmailByIdEmailIdDelete(emailId: number, options?: any): AxiosPromise<number> {
            return localVarFp.removeEmailByIdEmailIdDelete(emailId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a email
         * @summary Remove Email
         * @param {EmailDTO} emailDTO 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        removeEmailEmailDelete(emailDTO: EmailDTO, options?: any): AxiosPromise<number> {
            return localVarFp.removeEmailEmailDelete(emailDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmailApi - interface
 * @export
 * @interface EmailApi
 */
export interface EmailApiInterface {
    /**
     * Add a email
     * @summary Add Email
     * @param {EmailDTO} emailDTO 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof EmailApiInterface
     */
    addEmailEmailPost(emailDTO: EmailDTO, options?: AxiosRequestConfig): AxiosPromise<EmailDAO>;

    /**
     * Get all the emails
     * @summary Get All Emails
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof EmailApiInterface
     */
    getAllEmailsEmailAllGet(skip?: number, limit?: number, options?: AxiosRequestConfig): AxiosPromise<Array<EmailDAO>>;

    /**
     * Remove a email
     * @summary Remove Email By Id
     * @param {number} emailId 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof EmailApiInterface
     */
    removeEmailByIdEmailIdDelete(emailId: number, options?: AxiosRequestConfig): AxiosPromise<number>;

    /**
     * Remove a email
     * @summary Remove Email
     * @param {EmailDTO} emailDTO 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof EmailApiInterface
     */
    removeEmailEmailDelete(emailDTO: EmailDTO, options?: AxiosRequestConfig): AxiosPromise<number>;

}

/**
 * EmailApi - object-oriented interface
 * @export
 * @class EmailApi
 * @extends {BaseAPI}
 */
export class EmailApi extends BaseAPI implements EmailApiInterface {
    /**
     * Add a email
     * @summary Add Email
     * @param {EmailDTO} emailDTO 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof EmailApi
     */
    public addEmailEmailPost(emailDTO: EmailDTO, options?: AxiosRequestConfig) {
        return EmailApiFp(this.configuration).addEmailEmailPost(emailDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all the emails
     * @summary Get All Emails
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof EmailApi
     */
    public getAllEmailsEmailAllGet(skip?: number, limit?: number, options?: AxiosRequestConfig) {
        return EmailApiFp(this.configuration).getAllEmailsEmailAllGet(skip, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a email
     * @summary Remove Email By Id
     * @param {number} emailId 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof EmailApi
     */
    public removeEmailByIdEmailIdDelete(emailId: number, options?: AxiosRequestConfig) {
        return EmailApiFp(this.configuration).removeEmailByIdEmailIdDelete(emailId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a email
     * @summary Remove Email
     * @param {EmailDTO} emailDTO 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof EmailApi
     */
    public removeEmailEmailDelete(emailDTO: EmailDTO, options?: AxiosRequestConfig) {
        return EmailApiFp(this.configuration).removeEmailEmailDelete(emailDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ExternalWebhookWorkflowsApi - axios parameter creator
 * @export
 */
export const ExternalWebhookWorkflowsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Save Webhook Payload
         * @param {string} jobId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveWebhookPayloadExternalWebhookJobIdPost: async (jobId: string, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('saveWebhookPayloadExternalWebhookJobIdPost', 'jobId', jobId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('saveWebhookPayloadExternalWebhookJobIdPost', 'body', body)
            const localVarPath = `/external/webhook/{job_id}`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExternalWebhookWorkflowsApi - functional programming interface
 * @export
 */
export const ExternalWebhookWorkflowsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExternalWebhookWorkflowsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Save Webhook Payload
         * @param {string} jobId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveWebhookPayloadExternalWebhookJobIdPost(jobId: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveWebhookPayloadExternalWebhookJobIdPost(jobId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExternalWebhookWorkflowsApi - factory interface
 * @export
 */
export const ExternalWebhookWorkflowsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExternalWebhookWorkflowsApiFp(configuration)
    return {
        /**
         * 
         * @summary Save Webhook Payload
         * @param {string} jobId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveWebhookPayloadExternalWebhookJobIdPost(jobId: string, body: object, options?: any): AxiosPromise<any> {
            return localVarFp.saveWebhookPayloadExternalWebhookJobIdPost(jobId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExternalWebhookWorkflowsApi - interface
 * @export
 * @interface ExternalWebhookWorkflowsApi
 */
export interface ExternalWebhookWorkflowsApiInterface {
    /**
     * 
     * @summary Save Webhook Payload
     * @param {string} jobId 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalWebhookWorkflowsApiInterface
     */
    saveWebhookPayloadExternalWebhookJobIdPost(jobId: string, body: object, options?: AxiosRequestConfig): AxiosPromise<any>;

}

/**
 * ExternalWebhookWorkflowsApi - object-oriented interface
 * @export
 * @class ExternalWebhookWorkflowsApi
 * @extends {BaseAPI}
 */
export class ExternalWebhookWorkflowsApi extends BaseAPI implements ExternalWebhookWorkflowsApiInterface {
    /**
     * 
     * @summary Save Webhook Payload
     * @param {string} jobId 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalWebhookWorkflowsApi
     */
    public saveWebhookPayloadExternalWebhookJobIdPost(jobId: string, body: object, options?: AxiosRequestConfig) {
        return ExternalWebhookWorkflowsApiFp(this.configuration).saveWebhookPayloadExternalWebhookJobIdPost(jobId, body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * JobsApi - axios parameter creator
 * @export
 */
export const JobsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Job
         * @param {JobsDTO} jobsDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createJobJobsJobPost: async (jobsDTO: JobsDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobsDTO' is not null or undefined
            assertParamExists('createJobJobsJobPost', 'jobsDTO', jobsDTO)
            const localVarPath = `/jobs/job`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", ["user"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobsDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Job By Id
         * @param {number} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteJobByIdJobsDelete: async (jobId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('deleteJobByIdJobsDelete', 'jobId', jobId)
            const localVarPath = `/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", ["user"], configuration)

            if (jobId !== undefined) {
                localVarQueryParameter['job_id'] = jobId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets all jobs
         * @summary Get All Jobs
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllJobsJobsAllGet: async (skip?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/jobs/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", ["user"], configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets all jobs which are created by user
         * @summary Get All Jobs Related To User
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllJobsRelatedToUserJobsAllForUserGet: async (skip?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/jobs/allForUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", ["user"], configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Job By Id
         * @param {number} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobByIdJobsIdGet: async (jobId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('getJobByIdJobsIdGet', 'jobId', jobId)
            const localVarPath = `/jobs/id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", ["user"], configuration)

            if (jobId !== undefined) {
                localVarQueryParameter['jobId'] = jobId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Job By Name
         * @param {string} jobName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobByNameJobsGet: async (jobName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobName' is not null or undefined
            assertParamExists('getJobByNameJobsGet', 'jobName', jobName)
            const localVarPath = `/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", ["user"], configuration)

            if (jobName !== undefined) {
                localVarQueryParameter['jobName'] = jobName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request Job Run
         * @param {number} jobId 
         * @param {boolean} requestBool 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestJobRunJobsRequestJobRunGet: async (jobId: number, requestBool: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('requestJobRunJobsRequestJobRunGet', 'jobId', jobId)
            // verify required parameter 'requestBool' is not null or undefined
            assertParamExists('requestJobRunJobsRequestJobRunGet', 'requestBool', requestBool)
            const localVarPath = `/jobs/requestJobRun`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", ["user"], configuration)

            if (jobId !== undefined) {
                localVarQueryParameter['jobId'] = jobId;
            }

            if (requestBool !== undefined) {
                localVarQueryParameter['requestBool'] = requestBool;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Job
         * @param {number} jobId 
         * @param {JobsDTO} jobsDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateJobJobsPut: async (jobId: number, jobsDTO: JobsDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('updateJobJobsPut', 'jobId', jobId)
            // verify required parameter 'jobsDTO' is not null or undefined
            assertParamExists('updateJobJobsPut', 'jobsDTO', jobsDTO)
            const localVarPath = `/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", ["user"], configuration)

            if (jobId !== undefined) {
                localVarQueryParameter['job_id'] = jobId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobsDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobsApi - functional programming interface
 * @export
 */
export const JobsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Job
         * @param {JobsDTO} jobsDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createJobJobsJobPost(jobsDTO: JobsDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobsDAO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createJobJobsJobPost(jobsDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Job By Id
         * @param {number} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteJobByIdJobsDelete(jobId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteJobByIdJobsDelete(jobId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets all jobs
         * @summary Get All Jobs
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllJobsJobsAllGet(skip?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JobsMDAO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllJobsJobsAllGet(skip, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets all jobs which are created by user
         * @summary Get All Jobs Related To User
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllJobsRelatedToUserJobsAllForUserGet(skip?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JobsMDAO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllJobsRelatedToUserJobsAllForUserGet(skip, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Job By Id
         * @param {number} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJobByIdJobsIdGet(jobId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobsDAO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJobByIdJobsIdGet(jobId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Job By Name
         * @param {string} jobName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJobByNameJobsGet(jobName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobsDAO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJobByNameJobsGet(jobName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Request Job Run
         * @param {number} jobId 
         * @param {boolean} requestBool 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestJobRunJobsRequestJobRunGet(jobId: number, requestBool: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestJobRunJobsRequestJobRunGet(jobId, requestBool, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Job
         * @param {number} jobId 
         * @param {JobsDTO} jobsDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateJobJobsPut(jobId: number, jobsDTO: JobsDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobsDAO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateJobJobsPut(jobId, jobsDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JobsApi - factory interface
 * @export
 */
export const JobsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Job
         * @param {JobsDTO} jobsDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createJobJobsJobPost(jobsDTO: JobsDTO, options?: any): AxiosPromise<JobsDAO> {
            return localVarFp.createJobJobsJobPost(jobsDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Job By Id
         * @param {number} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteJobByIdJobsDelete(jobId: number, options?: any): AxiosPromise<string> {
            return localVarFp.deleteJobByIdJobsDelete(jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets all jobs
         * @summary Get All Jobs
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllJobsJobsAllGet(skip?: number, limit?: number, options?: any): AxiosPromise<Array<JobsMDAO>> {
            return localVarFp.getAllJobsJobsAllGet(skip, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets all jobs which are created by user
         * @summary Get All Jobs Related To User
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllJobsRelatedToUserJobsAllForUserGet(skip?: number, limit?: number, options?: any): AxiosPromise<Array<JobsMDAO>> {
            return localVarFp.getAllJobsRelatedToUserJobsAllForUserGet(skip, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Job By Id
         * @param {number} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobByIdJobsIdGet(jobId: number, options?: any): AxiosPromise<JobsDAO> {
            return localVarFp.getJobByIdJobsIdGet(jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Job By Name
         * @param {string} jobName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobByNameJobsGet(jobName: string, options?: any): AxiosPromise<JobsDAO> {
            return localVarFp.getJobByNameJobsGet(jobName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request Job Run
         * @param {number} jobId 
         * @param {boolean} requestBool 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestJobRunJobsRequestJobRunGet(jobId: number, requestBool: boolean, options?: any): AxiosPromise<string> {
            return localVarFp.requestJobRunJobsRequestJobRunGet(jobId, requestBool, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Job
         * @param {number} jobId 
         * @param {JobsDTO} jobsDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateJobJobsPut(jobId: number, jobsDTO: JobsDTO, options?: any): AxiosPromise<JobsDAO> {
            return localVarFp.updateJobJobsPut(jobId, jobsDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobsApi - interface
 * @export
 * @interface JobsApi
 */
export interface JobsApiInterface {
    /**
     * 
     * @summary Create Job
     * @param {JobsDTO} jobsDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    createJobJobsJobPost(jobsDTO: JobsDTO, options?: AxiosRequestConfig): AxiosPromise<JobsDAO>;

    /**
     * 
     * @summary Delete Job By Id
     * @param {number} jobId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    deleteJobByIdJobsDelete(jobId: number, options?: AxiosRequestConfig): AxiosPromise<string>;

    /**
     * Gets all jobs
     * @summary Get All Jobs
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    getAllJobsJobsAllGet(skip?: number, limit?: number, options?: AxiosRequestConfig): AxiosPromise<Array<JobsMDAO>>;

    /**
     * Gets all jobs which are created by user
     * @summary Get All Jobs Related To User
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    getAllJobsRelatedToUserJobsAllForUserGet(skip?: number, limit?: number, options?: AxiosRequestConfig): AxiosPromise<Array<JobsMDAO>>;

    /**
     * 
     * @summary Get Job By Id
     * @param {number} jobId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    getJobByIdJobsIdGet(jobId: number, options?: AxiosRequestConfig): AxiosPromise<JobsDAO>;

    /**
     * 
     * @summary Get Job By Name
     * @param {string} jobName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    getJobByNameJobsGet(jobName: string, options?: AxiosRequestConfig): AxiosPromise<JobsDAO>;

    /**
     * 
     * @summary Request Job Run
     * @param {number} jobId 
     * @param {boolean} requestBool 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    requestJobRunJobsRequestJobRunGet(jobId: number, requestBool: boolean, options?: AxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @summary Update Job
     * @param {number} jobId 
     * @param {JobsDTO} jobsDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    updateJobJobsPut(jobId: number, jobsDTO: JobsDTO, options?: AxiosRequestConfig): AxiosPromise<JobsDAO>;

}

/**
 * JobsApi - object-oriented interface
 * @export
 * @class JobsApi
 * @extends {BaseAPI}
 */
export class JobsApi extends BaseAPI implements JobsApiInterface {
    /**
     * 
     * @summary Create Job
     * @param {JobsDTO} jobsDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public createJobJobsJobPost(jobsDTO: JobsDTO, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).createJobJobsJobPost(jobsDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Job By Id
     * @param {number} jobId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public deleteJobByIdJobsDelete(jobId: number, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).deleteJobByIdJobsDelete(jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets all jobs
     * @summary Get All Jobs
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public getAllJobsJobsAllGet(skip?: number, limit?: number, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).getAllJobsJobsAllGet(skip, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets all jobs which are created by user
     * @summary Get All Jobs Related To User
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public getAllJobsRelatedToUserJobsAllForUserGet(skip?: number, limit?: number, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).getAllJobsRelatedToUserJobsAllForUserGet(skip, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Job By Id
     * @param {number} jobId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public getJobByIdJobsIdGet(jobId: number, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).getJobByIdJobsIdGet(jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Job By Name
     * @param {string} jobName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public getJobByNameJobsGet(jobName: string, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).getJobByNameJobsGet(jobName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request Job Run
     * @param {number} jobId 
     * @param {boolean} requestBool 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public requestJobRunJobsRequestJobRunGet(jobId: number, requestBool: boolean, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).requestJobRunJobsRequestJobRunGet(jobId, requestBool, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Job
     * @param {number} jobId 
     * @param {JobsDTO} jobsDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public updateJobJobsPut(jobId: number, jobsDTO: JobsDTO, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).updateJobJobsPut(jobId, jobsDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StoreleadsUtlApi - axios parameter creator
 * @export
 */
export const StoreleadsUtlApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Data From Storeleads
         * @param {string} storeleadsURL 
         * @param {number} pageSize 
         * @param {string} [cursor] 
         * @param {boolean} [fetchAll] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataFromStoreleadsStoreleadsUtlGetDataFromStoreLeadsGet: async (storeleadsURL: string, pageSize: number, cursor?: string, fetchAll?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeleadsURL' is not null or undefined
            assertParamExists('getDataFromStoreleadsStoreleadsUtlGetDataFromStoreLeadsGet', 'storeleadsURL', storeleadsURL)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('getDataFromStoreleadsStoreleadsUtlGetDataFromStoreLeadsGet', 'pageSize', pageSize)
            const localVarPath = `/storeleadsUtl/getDataFromStoreLeads`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", ["user"], configuration)

            if (storeleadsURL !== undefined) {
                localVarQueryParameter['storeleadsURL'] = storeleadsURL;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (fetchAll !== undefined) {
                localVarQueryParameter['fetchAll'] = fetchAll;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Domain
         * @param {string} domainName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomainStoreleadsUtlGetDomainGet: async (domainName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domainName' is not null or undefined
            assertParamExists('getDomainStoreleadsUtlGetDomainGet', 'domainName', domainName)
            const localVarPath = `/storeleadsUtl/getDomain`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", ["user"], configuration)

            if (domainName !== undefined) {
                localVarQueryParameter['domainName'] = domainName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches only 10 items of a storeleadsURL
         * @summary Verify Store Leads Url
         * @param {string} storeleadsURL 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyStoreLeadsUrlStoreleadsUtlVerifyStoreLeadsUrlGet: async (storeleadsURL: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeleadsURL' is not null or undefined
            assertParamExists('verifyStoreLeadsUrlStoreleadsUtlVerifyStoreLeadsUrlGet', 'storeleadsURL', storeleadsURL)
            const localVarPath = `/storeleadsUtl/verifyStoreLeadsUrl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", ["user"], configuration)

            if (storeleadsURL !== undefined) {
                localVarQueryParameter['storeleadsURL'] = storeleadsURL;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StoreleadsUtlApi - functional programming interface
 * @export
 */
export const StoreleadsUtlApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StoreleadsUtlApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Data From Storeleads
         * @param {string} storeleadsURL 
         * @param {number} pageSize 
         * @param {string} [cursor] 
         * @param {boolean} [fetchAll] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataFromStoreleadsStoreleadsUtlGetDataFromStoreLeadsGet(storeleadsURL: string, pageSize: number, cursor?: string, fetchAll?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataFromStoreleadsStoreleadsUtlGetDataFromStoreLeadsGet(storeleadsURL, pageSize, cursor, fetchAll, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Domain
         * @param {string} domainName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDomainStoreleadsUtlGetDomainGet(domainName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDomainStoreleadsUtlGetDomainGet(domainName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches only 10 items of a storeleadsURL
         * @summary Verify Store Leads Url
         * @param {string} storeleadsURL 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyStoreLeadsUrlStoreleadsUtlVerifyStoreLeadsUrlGet(storeleadsURL: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyStoreLeadsUrlStoreleadsUtlVerifyStoreLeadsUrlGet(storeleadsURL, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StoreleadsUtlApi - factory interface
 * @export
 */
export const StoreleadsUtlApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StoreleadsUtlApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Data From Storeleads
         * @param {string} storeleadsURL 
         * @param {number} pageSize 
         * @param {string} [cursor] 
         * @param {boolean} [fetchAll] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataFromStoreleadsStoreleadsUtlGetDataFromStoreLeadsGet(storeleadsURL: string, pageSize: number, cursor?: string, fetchAll?: boolean, options?: any): AxiosPromise<any> {
            return localVarFp.getDataFromStoreleadsStoreleadsUtlGetDataFromStoreLeadsGet(storeleadsURL, pageSize, cursor, fetchAll, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Domain
         * @param {string} domainName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomainStoreleadsUtlGetDomainGet(domainName: string, options?: any): AxiosPromise<any> {
            return localVarFp.getDomainStoreleadsUtlGetDomainGet(domainName, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches only 10 items of a storeleadsURL
         * @summary Verify Store Leads Url
         * @param {string} storeleadsURL 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyStoreLeadsUrlStoreleadsUtlVerifyStoreLeadsUrlGet(storeleadsURL: string, options?: any): AxiosPromise<any> {
            return localVarFp.verifyStoreLeadsUrlStoreleadsUtlVerifyStoreLeadsUrlGet(storeleadsURL, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StoreleadsUtlApi - interface
 * @export
 * @interface StoreleadsUtlApi
 */
export interface StoreleadsUtlApiInterface {
    /**
     * 
     * @summary Get Data From Storeleads
     * @param {string} storeleadsURL 
     * @param {number} pageSize 
     * @param {string} [cursor] 
     * @param {boolean} [fetchAll] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreleadsUtlApiInterface
     */
    getDataFromStoreleadsStoreleadsUtlGetDataFromStoreLeadsGet(storeleadsURL: string, pageSize: number, cursor?: string, fetchAll?: boolean, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Get Domain
     * @param {string} domainName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreleadsUtlApiInterface
     */
    getDomainStoreleadsUtlGetDomainGet(domainName: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * Fetches only 10 items of a storeleadsURL
     * @summary Verify Store Leads Url
     * @param {string} storeleadsURL 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreleadsUtlApiInterface
     */
    verifyStoreLeadsUrlStoreleadsUtlVerifyStoreLeadsUrlGet(storeleadsURL: string, options?: AxiosRequestConfig): AxiosPromise<any>;

}

/**
 * StoreleadsUtlApi - object-oriented interface
 * @export
 * @class StoreleadsUtlApi
 * @extends {BaseAPI}
 */
export class StoreleadsUtlApi extends BaseAPI implements StoreleadsUtlApiInterface {
    /**
     * 
     * @summary Get Data From Storeleads
     * @param {string} storeleadsURL 
     * @param {number} pageSize 
     * @param {string} [cursor] 
     * @param {boolean} [fetchAll] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreleadsUtlApi
     */
    public getDataFromStoreleadsStoreleadsUtlGetDataFromStoreLeadsGet(storeleadsURL: string, pageSize: number, cursor?: string, fetchAll?: boolean, options?: AxiosRequestConfig) {
        return StoreleadsUtlApiFp(this.configuration).getDataFromStoreleadsStoreleadsUtlGetDataFromStoreLeadsGet(storeleadsURL, pageSize, cursor, fetchAll, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Domain
     * @param {string} domainName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreleadsUtlApi
     */
    public getDomainStoreleadsUtlGetDomainGet(domainName: string, options?: AxiosRequestConfig) {
        return StoreleadsUtlApiFp(this.configuration).getDomainStoreleadsUtlGetDomainGet(domainName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches only 10 items of a storeleadsURL
     * @summary Verify Store Leads Url
     * @param {string} storeleadsURL 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreleadsUtlApi
     */
    public verifyStoreLeadsUrlStoreleadsUtlVerifyStoreLeadsUrlGet(storeleadsURL: string, options?: AxiosRequestConfig) {
        return StoreleadsUtlApiFp(this.configuration).verifyStoreLeadsUrlStoreleadsUtlVerifyStoreLeadsUrlGet(storeleadsURL, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Mark User Active
         * @param {string} targetEmail 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markUserActiveUsersMarkActiveGet: async (targetEmail: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'targetEmail' is not null or undefined
            assertParamExists('markUserActiveUsersMarkActiveGet', 'targetEmail', targetEmail)
            const localVarPath = `/users/markActive`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", ["admin", "user"], configuration)

            if (targetEmail !== undefined) {
                localVarQueryParameter['targetEmail'] = targetEmail;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Mark User Active
         * @param {string} targetEmail 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markUserActiveUsersMarkActiveGet(targetEmail: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDAO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.markUserActiveUsersMarkActiveGet(targetEmail, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Mark User Active
         * @param {string} targetEmail 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markUserActiveUsersMarkActiveGet(targetEmail: string, options?: any): AxiosPromise<UserDAO> {
            return localVarFp.markUserActiveUsersMarkActiveGet(targetEmail, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - interface
 * @export
 * @interface UsersApi
 */
export interface UsersApiInterface {
    /**
     * 
     * @summary Mark User Active
     * @param {string} targetEmail 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    markUserActiveUsersMarkActiveGet(targetEmail: string, options?: AxiosRequestConfig): AxiosPromise<UserDAO>;

}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI implements UsersApiInterface {
    /**
     * 
     * @summary Mark User Active
     * @param {string} targetEmail 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public markUserActiveUsersMarkActiveGet(targetEmail: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).markUserActiveUsersMarkActiveGet(targetEmail, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WebhookWorkflowsApi - axios parameter creator
 * @export
 */
export const WebhookWorkflowsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Check Workflow Name
         * @param {string} workflowName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkWorkflowNameWorkflowsCheckNameGet: async (workflowName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowName' is not null or undefined
            assertParamExists('checkWorkflowNameWorkflowsCheckNameGet', 'workflowName', workflowName)
            const localVarPath = `/workflows/checkName`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", ["user"], configuration)

            if (workflowName !== undefined) {
                localVarQueryParameter['workflow_name'] = workflowName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create workflow from ui
         * @summary Create Workflow
         * @param {WebhookJob} webhookJob 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkflowWorkflowsCreatePost: async (webhookJob: WebhookJob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhookJob' is not null or undefined
            assertParamExists('createWorkflowWorkflowsCreatePost', 'webhookJob', webhookJob)
            const localVarPath = `/workflows/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", ["user"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(webhookJob, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Workflow By Id
         * @param {string} workflowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkflowByIdWorkflowsIdDelete: async (workflowId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('deleteWorkflowByIdWorkflowsIdDelete', 'workflowId', workflowId)
            const localVarPath = `/workflows/id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", ["user"], configuration)

            if (workflowId !== undefined) {
                localVarQueryParameter['workflow_id'] = workflowId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all the pushed data to a webhook job
         * @summary Get All Workflow Webhook Data
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllWorkflowWebhookDataWorkflowsWebhookAllGet: async (jobId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('getAllWorkflowWebhookDataWorkflowsWebhookAllGet', 'jobId', jobId)
            const localVarPath = `/workflows/webhook/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", ["user"], configuration)

            if (jobId !== undefined) {
                localVarQueryParameter['jobId'] = jobId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Workflow By Id
         * @param {string} workflowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowByIdWorkflowsIdGet: async (workflowId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('getWorkflowByIdWorkflowsIdGet', 'workflowId', workflowId)
            const localVarPath = `/workflows/id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", ["user"], configuration)

            if (workflowId !== undefined) {
                localVarQueryParameter['workflow_id'] = workflowId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Workflows For Current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowsForCurrentUserWorkflowsAllForUserGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/workflows/allForUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", ["user"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Workflows
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowsWorkflowsAllGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/workflows/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", ["user"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Pushes data into a webhook job
         * @summary Save Hook Data
         * @param {string} jobId 
         * @param {WebhookPayloadModel} webhookPayloadModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveHookDataWorkflowsWebhookPost: async (jobId: string, webhookPayloadModel: WebhookPayloadModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('saveHookDataWorkflowsWebhookPost', 'jobId', jobId)
            // verify required parameter 'webhookPayloadModel' is not null or undefined
            assertParamExists('saveHookDataWorkflowsWebhookPost', 'webhookPayloadModel', webhookPayloadModel)
            const localVarPath = `/workflows/webhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", ["user"], configuration)

            if (jobId !== undefined) {
                localVarQueryParameter['jobId'] = jobId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(webhookPayloadModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Workflow By Id
         * @param {string} workflowId 
         * @param {WebhookJobOptional} webhookJobOptional 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkflowByIdWorkflowsIdPut: async (workflowId: string, webhookJobOptional: WebhookJobOptional, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('updateWorkflowByIdWorkflowsIdPut', 'workflowId', workflowId)
            // verify required parameter 'webhookJobOptional' is not null or undefined
            assertParamExists('updateWorkflowByIdWorkflowsIdPut', 'webhookJobOptional', webhookJobOptional)
            const localVarPath = `/workflows/id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", ["user"], configuration)

            if (workflowId !== undefined) {
                localVarQueryParameter['workflow_id'] = workflowId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(webhookJobOptional, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebhookWorkflowsApi - functional programming interface
 * @export
 */
export const WebhookWorkflowsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebhookWorkflowsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Check Workflow Name
         * @param {string} workflowName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkWorkflowNameWorkflowsCheckNameGet(workflowName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkWorkflowNameWorkflowsCheckNameGet(workflowName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create workflow from ui
         * @summary Create Workflow
         * @param {WebhookJob} webhookJob 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWorkflowWorkflowsCreatePost(webhookJob: WebhookJob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorkflowWorkflowsCreatePost(webhookJob, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Workflow By Id
         * @param {string} workflowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWorkflowByIdWorkflowsIdDelete(workflowId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWorkflowByIdWorkflowsIdDelete(workflowId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all the pushed data to a webhook job
         * @summary Get All Workflow Webhook Data
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllWorkflowWebhookDataWorkflowsWebhookAllGet(jobId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllWorkflowWebhookDataWorkflowsWebhookAllGet(jobId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Workflow By Id
         * @param {string} workflowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkflowByIdWorkflowsIdGet(workflowId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkflowByIdWorkflowsIdGet(workflowId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Workflows For Current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkflowsForCurrentUserWorkflowsAllForUserGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WebhookJobReturn>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkflowsForCurrentUserWorkflowsAllForUserGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Workflows
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkflowsWorkflowsAllGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WebhookJobReturn>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkflowsWorkflowsAllGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Pushes data into a webhook job
         * @summary Save Hook Data
         * @param {string} jobId 
         * @param {WebhookPayloadModel} webhookPayloadModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveHookDataWorkflowsWebhookPost(jobId: string, webhookPayloadModel: WebhookPayloadModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveHookDataWorkflowsWebhookPost(jobId, webhookPayloadModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Workflow By Id
         * @param {string} workflowId 
         * @param {WebhookJobOptional} webhookJobOptional 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWorkflowByIdWorkflowsIdPut(workflowId: string, webhookJobOptional: WebhookJobOptional, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWorkflowByIdWorkflowsIdPut(workflowId, webhookJobOptional, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WebhookWorkflowsApi - factory interface
 * @export
 */
export const WebhookWorkflowsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebhookWorkflowsApiFp(configuration)
    return {
        /**
         * 
         * @summary Check Workflow Name
         * @param {string} workflowName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkWorkflowNameWorkflowsCheckNameGet(workflowName: string, options?: any): AxiosPromise<any> {
            return localVarFp.checkWorkflowNameWorkflowsCheckNameGet(workflowName, options).then((request) => request(axios, basePath));
        },
        /**
         * Create workflow from ui
         * @summary Create Workflow
         * @param {WebhookJob} webhookJob 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkflowWorkflowsCreatePost(webhookJob: WebhookJob, options?: any): AxiosPromise<any> {
            return localVarFp.createWorkflowWorkflowsCreatePost(webhookJob, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Workflow By Id
         * @param {string} workflowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkflowByIdWorkflowsIdDelete(workflowId: string, options?: any): AxiosPromise<object> {
            return localVarFp.deleteWorkflowByIdWorkflowsIdDelete(workflowId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all the pushed data to a webhook job
         * @summary Get All Workflow Webhook Data
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllWorkflowWebhookDataWorkflowsWebhookAllGet(jobId: string, options?: any): AxiosPromise<any> {
            return localVarFp.getAllWorkflowWebhookDataWorkflowsWebhookAllGet(jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Workflow By Id
         * @param {string} workflowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowByIdWorkflowsIdGet(workflowId: string, options?: any): AxiosPromise<any> {
            return localVarFp.getWorkflowByIdWorkflowsIdGet(workflowId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Workflows For Current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowsForCurrentUserWorkflowsAllForUserGet(options?: any): AxiosPromise<Array<WebhookJobReturn>> {
            return localVarFp.getWorkflowsForCurrentUserWorkflowsAllForUserGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Workflows
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowsWorkflowsAllGet(options?: any): AxiosPromise<Array<WebhookJobReturn>> {
            return localVarFp.getWorkflowsWorkflowsAllGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Pushes data into a webhook job
         * @summary Save Hook Data
         * @param {string} jobId 
         * @param {WebhookPayloadModel} webhookPayloadModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveHookDataWorkflowsWebhookPost(jobId: string, webhookPayloadModel: WebhookPayloadModel, options?: any): AxiosPromise<any> {
            return localVarFp.saveHookDataWorkflowsWebhookPost(jobId, webhookPayloadModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Workflow By Id
         * @param {string} workflowId 
         * @param {WebhookJobOptional} webhookJobOptional 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkflowByIdWorkflowsIdPut(workflowId: string, webhookJobOptional: WebhookJobOptional, options?: any): AxiosPromise<object> {
            return localVarFp.updateWorkflowByIdWorkflowsIdPut(workflowId, webhookJobOptional, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WebhookWorkflowsApi - interface
 * @export
 * @interface WebhookWorkflowsApi
 */
export interface WebhookWorkflowsApiInterface {
    /**
     * 
     * @summary Check Workflow Name
     * @param {string} workflowName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookWorkflowsApiInterface
     */
    checkWorkflowNameWorkflowsCheckNameGet(workflowName: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * Create workflow from ui
     * @summary Create Workflow
     * @param {WebhookJob} webhookJob 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookWorkflowsApiInterface
     */
    createWorkflowWorkflowsCreatePost(webhookJob: WebhookJob, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Delete Workflow By Id
     * @param {string} workflowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookWorkflowsApiInterface
     */
    deleteWorkflowByIdWorkflowsIdDelete(workflowId: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * Get all the pushed data to a webhook job
     * @summary Get All Workflow Webhook Data
     * @param {string} jobId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookWorkflowsApiInterface
     */
    getAllWorkflowWebhookDataWorkflowsWebhookAllGet(jobId: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Get Workflow By Id
     * @param {string} workflowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookWorkflowsApiInterface
     */
    getWorkflowByIdWorkflowsIdGet(workflowId: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Get Workflows For Current User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookWorkflowsApiInterface
     */
    getWorkflowsForCurrentUserWorkflowsAllForUserGet(options?: AxiosRequestConfig): AxiosPromise<Array<WebhookJobReturn>>;

    /**
     * 
     * @summary Get Workflows
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookWorkflowsApiInterface
     */
    getWorkflowsWorkflowsAllGet(options?: AxiosRequestConfig): AxiosPromise<Array<WebhookJobReturn>>;

    /**
     * Pushes data into a webhook job
     * @summary Save Hook Data
     * @param {string} jobId 
     * @param {WebhookPayloadModel} webhookPayloadModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookWorkflowsApiInterface
     */
    saveHookDataWorkflowsWebhookPost(jobId: string, webhookPayloadModel: WebhookPayloadModel, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Update Workflow By Id
     * @param {string} workflowId 
     * @param {WebhookJobOptional} webhookJobOptional 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookWorkflowsApiInterface
     */
    updateWorkflowByIdWorkflowsIdPut(workflowId: string, webhookJobOptional: WebhookJobOptional, options?: AxiosRequestConfig): AxiosPromise<object>;

}

/**
 * WebhookWorkflowsApi - object-oriented interface
 * @export
 * @class WebhookWorkflowsApi
 * @extends {BaseAPI}
 */
export class WebhookWorkflowsApi extends BaseAPI implements WebhookWorkflowsApiInterface {
    /**
     * 
     * @summary Check Workflow Name
     * @param {string} workflowName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookWorkflowsApi
     */
    public checkWorkflowNameWorkflowsCheckNameGet(workflowName: string, options?: AxiosRequestConfig) {
        return WebhookWorkflowsApiFp(this.configuration).checkWorkflowNameWorkflowsCheckNameGet(workflowName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create workflow from ui
     * @summary Create Workflow
     * @param {WebhookJob} webhookJob 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookWorkflowsApi
     */
    public createWorkflowWorkflowsCreatePost(webhookJob: WebhookJob, options?: AxiosRequestConfig) {
        return WebhookWorkflowsApiFp(this.configuration).createWorkflowWorkflowsCreatePost(webhookJob, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Workflow By Id
     * @param {string} workflowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookWorkflowsApi
     */
    public deleteWorkflowByIdWorkflowsIdDelete(workflowId: string, options?: AxiosRequestConfig) {
        return WebhookWorkflowsApiFp(this.configuration).deleteWorkflowByIdWorkflowsIdDelete(workflowId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all the pushed data to a webhook job
     * @summary Get All Workflow Webhook Data
     * @param {string} jobId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookWorkflowsApi
     */
    public getAllWorkflowWebhookDataWorkflowsWebhookAllGet(jobId: string, options?: AxiosRequestConfig) {
        return WebhookWorkflowsApiFp(this.configuration).getAllWorkflowWebhookDataWorkflowsWebhookAllGet(jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Workflow By Id
     * @param {string} workflowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookWorkflowsApi
     */
    public getWorkflowByIdWorkflowsIdGet(workflowId: string, options?: AxiosRequestConfig) {
        return WebhookWorkflowsApiFp(this.configuration).getWorkflowByIdWorkflowsIdGet(workflowId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Workflows For Current User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookWorkflowsApi
     */
    public getWorkflowsForCurrentUserWorkflowsAllForUserGet(options?: AxiosRequestConfig) {
        return WebhookWorkflowsApiFp(this.configuration).getWorkflowsForCurrentUserWorkflowsAllForUserGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Workflows
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookWorkflowsApi
     */
    public getWorkflowsWorkflowsAllGet(options?: AxiosRequestConfig) {
        return WebhookWorkflowsApiFp(this.configuration).getWorkflowsWorkflowsAllGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Pushes data into a webhook job
     * @summary Save Hook Data
     * @param {string} jobId 
     * @param {WebhookPayloadModel} webhookPayloadModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookWorkflowsApi
     */
    public saveHookDataWorkflowsWebhookPost(jobId: string, webhookPayloadModel: WebhookPayloadModel, options?: AxiosRequestConfig) {
        return WebhookWorkflowsApiFp(this.configuration).saveHookDataWorkflowsWebhookPost(jobId, webhookPayloadModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Workflow By Id
     * @param {string} workflowId 
     * @param {WebhookJobOptional} webhookJobOptional 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookWorkflowsApi
     */
    public updateWorkflowByIdWorkflowsIdPut(workflowId: string, webhookJobOptional: WebhookJobOptional, options?: AxiosRequestConfig) {
        return WebhookWorkflowsApiFp(this.configuration).updateWorkflowByIdWorkflowsIdPut(workflowId, webhookJobOptional, options).then((request) => request(this.axios, this.basePath));
    }
}


